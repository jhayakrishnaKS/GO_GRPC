// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: office.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OfficeServiceClient is the client API for OfficeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfficeServiceClient interface {
	CreateEmp(ctx context.Context, in *Office, opts ...grpc.CallOption) (*EmpId, error)
	ReadEmp(ctx context.Context, in *EmpId, opts ...grpc.CallOption) (*Office, error)
	UpdateEmp(ctx context.Context, in *Office, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListEmp(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (OfficeService_ListEmpClient, error)
	DeleteEmp(ctx context.Context, in *EmpId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type officeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOfficeServiceClient(cc grpc.ClientConnInterface) OfficeServiceClient {
	return &officeServiceClient{cc}
}

func (c *officeServiceClient) CreateEmp(ctx context.Context, in *Office, opts ...grpc.CallOption) (*EmpId, error) {
	out := new(EmpId)
	err := c.cc.Invoke(ctx, "/office.officeService/CreateEmp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeServiceClient) ReadEmp(ctx context.Context, in *EmpId, opts ...grpc.CallOption) (*Office, error) {
	out := new(Office)
	err := c.cc.Invoke(ctx, "/office.officeService/ReadEmp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeServiceClient) UpdateEmp(ctx context.Context, in *Office, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/office.officeService/UpdateEmp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeServiceClient) ListEmp(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (OfficeService_ListEmpClient, error) {
	stream, err := c.cc.NewStream(ctx, &OfficeService_ServiceDesc.Streams[0], "/office.officeService/ListEmp", opts...)
	if err != nil {
		return nil, err
	}
	x := &officeServiceListEmpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OfficeService_ListEmpClient interface {
	Recv() (*Office, error)
	grpc.ClientStream
}

type officeServiceListEmpClient struct {
	grpc.ClientStream
}

func (x *officeServiceListEmpClient) Recv() (*Office, error) {
	m := new(Office)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *officeServiceClient) DeleteEmp(ctx context.Context, in *EmpId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/office.officeService/DeleteEmp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfficeServiceServer is the server API for OfficeService service.
// All implementations must embed UnimplementedOfficeServiceServer
// for forward compatibility
type OfficeServiceServer interface {
	CreateEmp(context.Context, *Office) (*EmpId, error)
	ReadEmp(context.Context, *EmpId) (*Office, error)
	UpdateEmp(context.Context, *Office) (*emptypb.Empty, error)
	ListEmp(*emptypb.Empty, OfficeService_ListEmpServer) error
	DeleteEmp(context.Context, *EmpId) (*emptypb.Empty, error)
	mustEmbedUnimplementedOfficeServiceServer()
}

// UnimplementedOfficeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOfficeServiceServer struct {
}

func (UnimplementedOfficeServiceServer) CreateEmp(context.Context, *Office) (*EmpId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmp not implemented")
}
func (UnimplementedOfficeServiceServer) ReadEmp(context.Context, *EmpId) (*Office, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEmp not implemented")
}
func (UnimplementedOfficeServiceServer) UpdateEmp(context.Context, *Office) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmp not implemented")
}
func (UnimplementedOfficeServiceServer) ListEmp(*emptypb.Empty, OfficeService_ListEmpServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEmp not implemented")
}
func (UnimplementedOfficeServiceServer) DeleteEmp(context.Context, *EmpId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmp not implemented")
}
func (UnimplementedOfficeServiceServer) mustEmbedUnimplementedOfficeServiceServer() {}

// UnsafeOfficeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfficeServiceServer will
// result in compilation errors.
type UnsafeOfficeServiceServer interface {
	mustEmbedUnimplementedOfficeServiceServer()
}

func RegisterOfficeServiceServer(s grpc.ServiceRegistrar, srv OfficeServiceServer) {
	s.RegisterService(&OfficeService_ServiceDesc, srv)
}

func _OfficeService_CreateEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Office)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).CreateEmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/office.officeService/CreateEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).CreateEmp(ctx, req.(*Office))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeService_ReadEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmpId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).ReadEmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/office.officeService/ReadEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).ReadEmp(ctx, req.(*EmpId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeService_UpdateEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Office)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).UpdateEmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/office.officeService/UpdateEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).UpdateEmp(ctx, req.(*Office))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficeService_ListEmp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OfficeServiceServer).ListEmp(m, &officeServiceListEmpServer{stream})
}

type OfficeService_ListEmpServer interface {
	Send(*Office) error
	grpc.ServerStream
}

type officeServiceListEmpServer struct {
	grpc.ServerStream
}

func (x *officeServiceListEmpServer) Send(m *Office) error {
	return x.ServerStream.SendMsg(m)
}

func _OfficeService_DeleteEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmpId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServiceServer).DeleteEmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/office.officeService/DeleteEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServiceServer).DeleteEmp(ctx, req.(*EmpId))
	}
	return interceptor(ctx, in, info, handler)
}

// OfficeService_ServiceDesc is the grpc.ServiceDesc for OfficeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfficeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "office.officeService",
	HandlerType: (*OfficeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmp",
			Handler:    _OfficeService_CreateEmp_Handler,
		},
		{
			MethodName: "ReadEmp",
			Handler:    _OfficeService_ReadEmp_Handler,
		},
		{
			MethodName: "UpdateEmp",
			Handler:    _OfficeService_UpdateEmp_Handler,
		},
		{
			MethodName: "DeleteEmp",
			Handler:    _OfficeService_DeleteEmp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEmp",
			Handler:       _OfficeService_ListEmp_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "office.proto",
}
